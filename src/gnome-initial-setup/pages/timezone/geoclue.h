/*
 * Generated by gdbus-codegen 2.45.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GEOCLUE_H__
#define __GEOCLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Manager */

#define GEOCLUE_TYPE_MANAGER (geoclue_manager_get_type ())
#define GEOCLUE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_MANAGER, GeoclueManager))
#define GEOCLUE_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_MANAGER))
#define GEOCLUE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GEOCLUE_TYPE_MANAGER, GeoclueManagerIface))

struct _GeoclueManager;
typedef struct _GeoclueManager GeoclueManager;
typedef struct _GeoclueManagerIface GeoclueManagerIface;

struct _GeoclueManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_agent) (
    GeoclueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_client) (
    GeoclueManager *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_available_accuracy_level) (GeoclueManager *object);

  gboolean  (*get_in_use) (GeoclueManager *object);

};

GType geoclue_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *geoclue_manager_interface_info (void);
guint geoclue_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void geoclue_manager_complete_get_client (
    GeoclueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client);

void geoclue_manager_complete_add_agent (
    GeoclueManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void geoclue_manager_call_get_client (
    GeoclueManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean geoclue_manager_call_get_client_finish (
    GeoclueManager *proxy,
    gchar **out_client,
    GAsyncResult *res,
    GError **error);

gboolean geoclue_manager_call_get_client_sync (
    GeoclueManager *proxy,
    gchar **out_client,
    GCancellable *cancellable,
    GError **error);

void geoclue_manager_call_add_agent (
    GeoclueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean geoclue_manager_call_add_agent_finish (
    GeoclueManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean geoclue_manager_call_add_agent_sync (
    GeoclueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean geoclue_manager_get_in_use (GeoclueManager *object);
void geoclue_manager_set_in_use (GeoclueManager *object, gboolean value);

guint geoclue_manager_get_available_accuracy_level (GeoclueManager *object);
void geoclue_manager_set_available_accuracy_level (GeoclueManager *object, guint value);


/* ---- */

#define GEOCLUE_TYPE_MANAGER_PROXY (geoclue_manager_proxy_get_type ())
#define GEOCLUE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_MANAGER_PROXY, GeoclueManagerProxy))
#define GEOCLUE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_MANAGER_PROXY, GeoclueManagerProxyClass))
#define GEOCLUE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_MANAGER_PROXY, GeoclueManagerProxyClass))
#define GEOCLUE_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_MANAGER_PROXY))
#define GEOCLUE_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_MANAGER_PROXY))

typedef struct _GeoclueManagerProxy GeoclueManagerProxy;
typedef struct _GeoclueManagerProxyClass GeoclueManagerProxyClass;
typedef struct _GeoclueManagerProxyPrivate GeoclueManagerProxyPrivate;

struct _GeoclueManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GeoclueManagerProxyPrivate *priv;
};

struct _GeoclueManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType geoclue_manager_proxy_get_type (void) G_GNUC_CONST;

void geoclue_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueManager *geoclue_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueManager *geoclue_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void geoclue_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueManager *geoclue_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueManager *geoclue_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GEOCLUE_TYPE_MANAGER_SKELETON (geoclue_manager_skeleton_get_type ())
#define GEOCLUE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_MANAGER_SKELETON, GeoclueManagerSkeleton))
#define GEOCLUE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_MANAGER_SKELETON, GeoclueManagerSkeletonClass))
#define GEOCLUE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_MANAGER_SKELETON, GeoclueManagerSkeletonClass))
#define GEOCLUE_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_MANAGER_SKELETON))
#define GEOCLUE_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_MANAGER_SKELETON))

typedef struct _GeoclueManagerSkeleton GeoclueManagerSkeleton;
typedef struct _GeoclueManagerSkeletonClass GeoclueManagerSkeletonClass;
typedef struct _GeoclueManagerSkeletonPrivate GeoclueManagerSkeletonPrivate;

struct _GeoclueManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GeoclueManagerSkeletonPrivate *priv;
};

struct _GeoclueManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType geoclue_manager_skeleton_get_type (void) G_GNUC_CONST;

GeoclueManager *geoclue_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Client */

#define GEOCLUE_TYPE_CLIENT (geoclue_client_get_type ())
#define GEOCLUE_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_CLIENT, GeoclueClient))
#define GEOCLUE_IS_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_CLIENT))
#define GEOCLUE_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GEOCLUE_TYPE_CLIENT, GeoclueClientIface))

struct _GeoclueClient;
typedef struct _GeoclueClient GeoclueClient;
typedef struct _GeoclueClientIface GeoclueClientIface;

struct _GeoclueClientIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_start) (
    GeoclueClient *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    GeoclueClient *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_active) (GeoclueClient *object);

  const gchar * (*get_desktop_id) (GeoclueClient *object);

  guint  (*get_distance_threshold) (GeoclueClient *object);

  const gchar * (*get_location) (GeoclueClient *object);

  guint  (*get_requested_accuracy_level) (GeoclueClient *object);

  void (*location_updated) (
    GeoclueClient *object,
    const gchar *arg_old,
    const gchar *arg_new);

};

GType geoclue_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *geoclue_client_interface_info (void);
guint geoclue_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void geoclue_client_complete_start (
    GeoclueClient *object,
    GDBusMethodInvocation *invocation);

void geoclue_client_complete_stop (
    GeoclueClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void geoclue_client_emit_location_updated (
    GeoclueClient *object,
    const gchar *arg_old,
    const gchar *arg_new);



/* D-Bus method calls: */
void geoclue_client_call_start (
    GeoclueClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean geoclue_client_call_start_finish (
    GeoclueClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean geoclue_client_call_start_sync (
    GeoclueClient *proxy,
    GCancellable *cancellable,
    GError **error);

void geoclue_client_call_stop (
    GeoclueClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean geoclue_client_call_stop_finish (
    GeoclueClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean geoclue_client_call_stop_sync (
    GeoclueClient *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *geoclue_client_get_location (GeoclueClient *object);
gchar *geoclue_client_dup_location (GeoclueClient *object);
void geoclue_client_set_location (GeoclueClient *object, const gchar *value);

guint geoclue_client_get_distance_threshold (GeoclueClient *object);
void geoclue_client_set_distance_threshold (GeoclueClient *object, guint value);

const gchar *geoclue_client_get_desktop_id (GeoclueClient *object);
gchar *geoclue_client_dup_desktop_id (GeoclueClient *object);
void geoclue_client_set_desktop_id (GeoclueClient *object, const gchar *value);

guint geoclue_client_get_requested_accuracy_level (GeoclueClient *object);
void geoclue_client_set_requested_accuracy_level (GeoclueClient *object, guint value);

gboolean geoclue_client_get_active (GeoclueClient *object);
void geoclue_client_set_active (GeoclueClient *object, gboolean value);


/* ---- */

#define GEOCLUE_TYPE_CLIENT_PROXY (geoclue_client_proxy_get_type ())
#define GEOCLUE_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_CLIENT_PROXY, GeoclueClientProxy))
#define GEOCLUE_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_CLIENT_PROXY, GeoclueClientProxyClass))
#define GEOCLUE_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_CLIENT_PROXY, GeoclueClientProxyClass))
#define GEOCLUE_IS_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_CLIENT_PROXY))
#define GEOCLUE_IS_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_CLIENT_PROXY))

typedef struct _GeoclueClientProxy GeoclueClientProxy;
typedef struct _GeoclueClientProxyClass GeoclueClientProxyClass;
typedef struct _GeoclueClientProxyPrivate GeoclueClientProxyPrivate;

struct _GeoclueClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GeoclueClientProxyPrivate *priv;
};

struct _GeoclueClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType geoclue_client_proxy_get_type (void) G_GNUC_CONST;

void geoclue_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueClient *geoclue_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueClient *geoclue_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void geoclue_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueClient *geoclue_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueClient *geoclue_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GEOCLUE_TYPE_CLIENT_SKELETON (geoclue_client_skeleton_get_type ())
#define GEOCLUE_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_CLIENT_SKELETON, GeoclueClientSkeleton))
#define GEOCLUE_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_CLIENT_SKELETON, GeoclueClientSkeletonClass))
#define GEOCLUE_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_CLIENT_SKELETON, GeoclueClientSkeletonClass))
#define GEOCLUE_IS_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_CLIENT_SKELETON))
#define GEOCLUE_IS_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_CLIENT_SKELETON))

typedef struct _GeoclueClientSkeleton GeoclueClientSkeleton;
typedef struct _GeoclueClientSkeletonClass GeoclueClientSkeletonClass;
typedef struct _GeoclueClientSkeletonPrivate GeoclueClientSkeletonPrivate;

struct _GeoclueClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GeoclueClientSkeletonPrivate *priv;
};

struct _GeoclueClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType geoclue_client_skeleton_get_type (void) G_GNUC_CONST;

GeoclueClient *geoclue_client_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Location */

#define GEOCLUE_TYPE_LOCATION (geoclue_location_get_type ())
#define GEOCLUE_LOCATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_LOCATION, GeoclueLocation))
#define GEOCLUE_IS_LOCATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_LOCATION))
#define GEOCLUE_LOCATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GEOCLUE_TYPE_LOCATION, GeoclueLocationIface))

struct _GeoclueLocation;
typedef struct _GeoclueLocation GeoclueLocation;
typedef struct _GeoclueLocationIface GeoclueLocationIface;

struct _GeoclueLocationIface
{
  GTypeInterface parent_iface;

  gdouble  (*get_accuracy) (GeoclueLocation *object);

  gdouble  (*get_altitude) (GeoclueLocation *object);

  const gchar * (*get_description) (GeoclueLocation *object);

  gdouble  (*get_heading) (GeoclueLocation *object);

  gdouble  (*get_latitude) (GeoclueLocation *object);

  gdouble  (*get_longitude) (GeoclueLocation *object);

  gdouble  (*get_speed) (GeoclueLocation *object);

};

GType geoclue_location_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *geoclue_location_interface_info (void);
guint geoclue_location_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gdouble geoclue_location_get_latitude (GeoclueLocation *object);
void geoclue_location_set_latitude (GeoclueLocation *object, gdouble value);

gdouble geoclue_location_get_longitude (GeoclueLocation *object);
void geoclue_location_set_longitude (GeoclueLocation *object, gdouble value);

gdouble geoclue_location_get_accuracy (GeoclueLocation *object);
void geoclue_location_set_accuracy (GeoclueLocation *object, gdouble value);

gdouble geoclue_location_get_altitude (GeoclueLocation *object);
void geoclue_location_set_altitude (GeoclueLocation *object, gdouble value);

gdouble geoclue_location_get_speed (GeoclueLocation *object);
void geoclue_location_set_speed (GeoclueLocation *object, gdouble value);

gdouble geoclue_location_get_heading (GeoclueLocation *object);
void geoclue_location_set_heading (GeoclueLocation *object, gdouble value);

const gchar *geoclue_location_get_description (GeoclueLocation *object);
gchar *geoclue_location_dup_description (GeoclueLocation *object);
void geoclue_location_set_description (GeoclueLocation *object, const gchar *value);


/* ---- */

#define GEOCLUE_TYPE_LOCATION_PROXY (geoclue_location_proxy_get_type ())
#define GEOCLUE_LOCATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_LOCATION_PROXY, GeoclueLocationProxy))
#define GEOCLUE_LOCATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_LOCATION_PROXY, GeoclueLocationProxyClass))
#define GEOCLUE_LOCATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_LOCATION_PROXY, GeoclueLocationProxyClass))
#define GEOCLUE_IS_LOCATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_LOCATION_PROXY))
#define GEOCLUE_IS_LOCATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_LOCATION_PROXY))

typedef struct _GeoclueLocationProxy GeoclueLocationProxy;
typedef struct _GeoclueLocationProxyClass GeoclueLocationProxyClass;
typedef struct _GeoclueLocationProxyPrivate GeoclueLocationProxyPrivate;

struct _GeoclueLocationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GeoclueLocationProxyPrivate *priv;
};

struct _GeoclueLocationProxyClass
{
  GDBusProxyClass parent_class;
};

GType geoclue_location_proxy_get_type (void) G_GNUC_CONST;

void geoclue_location_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueLocation *geoclue_location_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueLocation *geoclue_location_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void geoclue_location_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GeoclueLocation *geoclue_location_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GeoclueLocation *geoclue_location_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GEOCLUE_TYPE_LOCATION_SKELETON (geoclue_location_skeleton_get_type ())
#define GEOCLUE_LOCATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GEOCLUE_TYPE_LOCATION_SKELETON, GeoclueLocationSkeleton))
#define GEOCLUE_LOCATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GEOCLUE_TYPE_LOCATION_SKELETON, GeoclueLocationSkeletonClass))
#define GEOCLUE_LOCATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GEOCLUE_TYPE_LOCATION_SKELETON, GeoclueLocationSkeletonClass))
#define GEOCLUE_IS_LOCATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GEOCLUE_TYPE_LOCATION_SKELETON))
#define GEOCLUE_IS_LOCATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GEOCLUE_TYPE_LOCATION_SKELETON))

typedef struct _GeoclueLocationSkeleton GeoclueLocationSkeleton;
typedef struct _GeoclueLocationSkeletonClass GeoclueLocationSkeletonClass;
typedef struct _GeoclueLocationSkeletonPrivate GeoclueLocationSkeletonPrivate;

struct _GeoclueLocationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GeoclueLocationSkeletonPrivate *priv;
};

struct _GeoclueLocationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType geoclue_location_skeleton_get_type (void) G_GNUC_CONST;

GeoclueLocation *geoclue_location_skeleton_new (void);


G_END_DECLS

#endif /* __GEOCLUE_H__ */
